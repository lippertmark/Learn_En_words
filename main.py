import telebot
from telebot import types
import sql.use_sql as sql
import random

LEARN = 5  # –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, —á—Ç–æ–±—ã –≤—ã—É—á–∏—Ç—å
bot = telebot.TeleBot('5162531568:AAFulbpqupsSMHiri53UD0jIRC7gpzUayTc')


def is_learned(tg_id, word_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –Ω–µ—Ç.
    :param tg_id:
    :param word_id:
    :return: true(learned)/false(not learned)
    """
    # TODO (@–û–ª–µ—Å—è)
    notes = sql.notes_by_user_and_word(tg_id, word_id)
    if notes == []:
        return False
    elif len(notes) == 1 and notes[0][3] == 'GENERATED':
        return False
    else:
        return True


def generate_word(tg_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è—è –µ–≥–æ –Ω–∞ —Ç–æ —á—Ç–æ –æ–Ω–æ —É–∂–µ –≤—ã—É—á–µ–Ω–æ, –µ—Å–ª–∏ –≤—ã—É—á–µ–Ω–æ —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ.
    :param tg_id:
    :return: word (tuple): (word_id, word_en, word_ru, category, sentence, hate)
    """
    # TODO (@–û–ª–µ—Å—è)
    flag = 0
    words = sql.all_words()
    while flag == 0:
        word = random.choice(words)
        if not is_learned(tg_id, word[0]):
            flag = 1
    return word


def send_new_word(tg_id):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä—É —ç—Ç–æ —Å–ª–æ–≤–æ
    :param tg_id:
    :return:
    """
    # TODO (@–û–ª–µ—Å—è) –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –±–æ–ª—å—à–µ 10 —Å–ª–æ–≤
    if sql.user_info(tg_id)['cnt_words_today'] == 10:
        bot.send_message(chat_id=tg_id, text=f'–¢—ã —É–∂–µ –≤—ã—É—á–∏–ª 10 —Å–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!')
    else:
        # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        word = generate_word(tg_id)
        bot.send_message(chat_id=tg_id, text=f'–¢–≤–æ–µ —Å–ª–æ–≤–æ: {word[1]}')
        sql.add_new_note(tg_id, word[0], sql.GENERATED, None)
        # TODO (@–û–ª–µ—Å—è) –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω–∫–µ–π–±–æ—Ä–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        my_words = generate_choice(word[0])
        markup = telebot.types.InlineKeyboardMarkup()
        item1 = telebot.types.InlineKeyboardButton(text=word[2], callback_data='accept')
        item2 = telebot.types.InlineKeyboardButton(text=my_words[1][1], callback_data='wrong')
        item3 = telebot.types.InlineKeyboardButton(text=my_words[2][1], callback_data='wrong')
        item4 = telebot.types.InlineKeyboardButton(text=my_words[3][1], callback_data='wrong')
        spisok = [item4, item3, item2, item1]
        random.shuffle(spisok)
        for i in spisok:
            markup.add(i)
    bot.send_message(chat_id=tg_id, text='–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:', reply_markup=markup)


def generate_choice(word_id):
    """
    Generate 3 wrong answer
    :param word_id:
    :return: list(of 4 tuples(word_id, word_ru, word_en, 1-correct answer, 0-wrong answer))
    """
    # TODO (@–û–ª–µ—Å—è)
    list_of_selected_words = [word_id]
    list_of_words = [(word_id, sql.word_info(word_id)[2], sql.word_info(word_id)[1], 1)]
    while len(list_of_words) < 4:
        wrong_word = random.choice(sql.all_words())
        if wrong_word[0] not in list_of_selected_words:
            list_of_words.append((wrong_word[0], wrong_word[2], wrong_word[1], 0))
            list_of_selected_words.append(wrong_word[0])
    return list_of_words


def send_repeat_word(tg_id, word_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.
    :param tg_id:
    :param word_id:
    :return: nothing
    """
    # TODO (@Amir)
    pass


@bot.message_handler(commands=['start'])
def welcome(message):
    # TODO (@–û–ª–µ—Å—è) –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —é–∑–µ—Ä–∞ —Ç–∞–∫–∂–µ –∫–∞–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    user_id = message.from_user.id
    user_username = message.from_user.username
    sticker = open('img/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    item1 = telebot.types.InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å üóÇ', callback_data='profile')
    item2 = telebot.types.InlineKeyboardButton(text='–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ üîé', callback_data='learn_new')
    item3 = telebot.types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ üìö', callback_data='repeat_words')

    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç, {0.first_name}! ü•∞\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. ü§ñ'.format(
                         message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
    if not sql.is_user_in_db(message.from_user.id):
        sql.new_user(user_id, user_username)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    tg_id = call.from_user.id
    if sql.is_user_in_db(tg_id):
        username = call.message.chat.username

        if call.message:
            if call.data == 'profile':
                markup2 = telebot.types.InlineKeyboardMarkup()
                markup2.add(telebot.types.InlineKeyboardButton(text='–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ üîé', callback_data='learn_new'))
                markup2.add(telebot.types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞ üìö', callback_data='repeat_words'))

                score = sql.user_info(tg_id)['score']
                bot.send_message(tg_id,
                                 f'–í–∞—à –Ω–∏–∫ üòä: {username}\n\n–¢–≤–æ–∏ –æ—á–∫–∏ üòã: {score}\n\n–í—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ ü§å: '
                                 f'{sql.user_info(tg_id)["cnt_words_total"]}',
                                 reply_markup=markup2)
            elif call.data == 'learn_new':
                # TODO (@–û–ª–µ—Å—è) –≤—ã–∑–≤–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é send_new_word
                send_new_word(tg_id)
            elif call.data == 'repeat_words':
                # TODO (@Amir)
                # –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—Ü–Ω–∫—Ü–∏—é notes_by_user —Ñ–∏–ª—å—Ç—Ä –ø–æ RETRY –∏ again < LEARN
                # –≤—ã–¥–∞—Ç—å —Å–ª–æ–≤–æ send_repeat_word
                pass
            elif call.data == 'wrong':
                # TODO (@–û–ª–µ—Å—è) —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–æ–Ω–≥, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞
                bot.send_message(tg_id,
                                 '–ù–µ –≤–µ—Ä–Ω–æ, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üòö')
                send_new_word(tg_id)
            elif call.data == 'accept':
                bot.send_message(tg_id,
                                 '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –£–º–Ω–∏—Ü–∞! ü•∞')
                # TODO (@–û–ª–µ—Å—è) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–≤–∞–ª–∞

                sql.add_new_note(tg_id, sql.user_info(tg_id)['new_word_id'], sql.RETRY, 0)
                send_new_word(tg_id)
                # TODO (@–û–ª–µ—Å—è) –∏–Ω–∫—Ä–∏–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
                sql.inc_cnt_today(tg_id)
        # —Ç—É—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏


@bot.message_handler(content_type=['text'])
def text(message):
    if sql.is_user_in_db(message.from_user.id):
        pass
        # TODO (@Amir)
        # 1. –ª–∏–±–æ –ø–æ—Ö–≤–∞–ª–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ü–æ–≤—Ç–æ—Ä—è—Ç—å –¥–∞–ª—å—à–µ(callback_data='repeat_words')
        # - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ç—É —Å again+1
        # - –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö User repeat_word_id set NULL
        # 2. –ª–∏–±–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
        # —Ç—É—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç
    else:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ "/start", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!')
        # TODO (@–û–ª–µ—Å—è) –Ω—É–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—à–∏ /start


bot.polling(none_stop=True)
# —Ç—É—É–≥–∞–Ω —Ç—É–≥–∞–Ω —è–∫
