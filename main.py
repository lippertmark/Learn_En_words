import telebot
from telebot import types
import sqlite3
import random

bot = telebot.TeleBot('5162531568:AAFulbpqupsSMHiri53UD0jIRC7gpzUayTc')
GENERATED = 'GENERATED'
RETRY = 'RETRY'
DONE = 'DONE'


def sql_new_user(tg_id, tg_username):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    :param tg_id:
    :param tg_username:
    :return: nothing
    """
    conn = sqlite3.connect('EnglishBotka.db')
    cursor = conn.cursor()
    req = f"INSERT INTO User VALUES ({tg_id}, '{tg_username}', 0)"
    cursor.execute(req)
    conn.close()


def sql_is_user_in_db(tg_id):
    """
    –§—É–Ω–∫—Ü–∏—Ñ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —é–∑–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :param tg_id:
    :return: true/false
    """
    conn = sqlite3.connect('EnglishBotka.db')
    cursor = conn.cursor()
    req = f"SELECT tg_id FROM User"
    cursor.execute(req)
    result = cursor.fetchall()
    conn.close()
    for i in result:
        if tg_id in i:
            return True
    return False


def sql_all_words():
    '''
    –§—É–Ω–∫—Ü–∏—è –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤—Å–µ—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :return: all_words (list of touple(word_id, word_en, category, word_ru, sentance, hate)):
        –ª–∏—Å—Ç –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    '''
    # TODO (@–°–µ—Ä–≥–µ–π)
    pass


def sql_notes_by_user(tg_id):
    '''
    –í—ã–¥–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ —é–∑–µ—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Note.
    :param tg_id: telegram user id
    :return: notes_by_user (list of tuples): (tg_id, date, word_id, type, again)
    '''
    # TODO (@–°–µ—Ä–≥–µ–π)
    pass


def sql_notes_by_user_and_word(tg_id, word_id):
    '''
    –í—ã–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –æ —é–∑–µ—Ä–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–ª–æ–≤–æ–º.

    :param tg_id:
    :param word_id:
    :return: notes_user_word list(of tuples): (tg_id, date, word_id, type, again)
    '''
    # TODO (@–°–µ—Ä–≥–µ–π)
    pass


def sql_user_is_exist(tg_id):
    '''
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–≤–æ–≤–∞—Ç–µ–ª—å.
    :param tg_id:
    :return: true/false
    '''
    # TODO (@–°–µ—Ä–≥–µ–π)
    pass


def sql_user_info(tg_id):
    '''
    –í—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–µ.
    :param tg_id:
    :return:
        user info (dict): –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ tg_id, tg_username, score, cnt_words_today, cnt_words_total
    '''
    # TODO (@–°–µ—Ä–≥–µ–π)
    pass


def is_learned(tg_id, word_id):
    '''
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –Ω–µ—Ç.
    :param tg_id:
    :param word_id:
    :return: true/false
    '''
    # TODO (@–û–ª–µ—Å—è)
    if sql_notes_by_user_and_word(tg_id, word_id) != []:  # –Ω–∞–¥–æ –Ω–µ –∫–∞–∫ —Å –∫–ª–∞—Å—Å–æ–º
        return True
    return False


def generate_word(tg_id):
    '''
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ–≤–µ—Ä—è—è –µ–≥–æ –Ω–∞ —Ç–æ —á—Ç–æ –æ–Ω–æ —É–∂–µ –≤—ã—É—á–µ–Ω–æ, –µ—Å–ª–∏ –≤—ã—É—á–µ–Ω–æ —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ.
    :param tg_id:
    :return: word (tuple): (word_id, word_en, word_ru, category, sentance, hate)
    '''
    # TODO (@–û–ª–µ—Å—è)
    word = random.choice(sql_all_words())
    if is_learned(tg_id, word.word_id):  # –Ω–∞–¥–æ –Ω–µ –∫–∞–∫ —Å –∫–ª–∞—Å—Å–æ–º
        generate_word(tg_id)
    else:
        return word


def send_new_word(tg_id):
    '''
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä—É —ç—Ç–æ —Å–ª–æ–≤–æ
    :param tg_id:
    :return:
    '''
    # TODO (@–û–ª–µ—Å—è) –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –±–æ–ª—å—à–µ 10 —Å–ª–æ–≤
    word = generate_word(tg_id)
    bot.send_message(chat_id=tg_id.from_user.id, text=f'{word.word_en}')  # –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    new_note(tg_id, word_id, GENERATED, None)
    # TODO (@–û–ª–µ—Å—è) –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω–∫–µ–π–±–æ—Ä–¥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞


@bot.message_handler(commands=['start'])
def welcome(message):
    user_id = message.from_user.id
    user_username = message.from_user.username
    sticker = open('img/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    markup = telebot.types.InlineKeyboardMarkup()
    item1 = telebot.types.InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åüóÇ', callback_data='profile')
    item2 = telebot.types.InlineKeyboardButton(text='–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞üîé', callback_data='learn_new')
    item3 = telebot.types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞üìö', callback_data='repeat_words')

    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç, {0.first_name}!ü•∞\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.ü§ñ'.format(
                         message.from_user, bot.get_me()), parse_mode='html', reply_markup=markup)
    sql_new_user(user_id, user_username)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if sql_is_user_in_db(call.message.from_user.id):
        username = call.message.chat.username
        # TODO (@–û–ª–µ—Å—è) –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —é–∑–µ—Ä–∞
        if call.message:
            if call.data == 'profile':
                markup2 = telebot.types.InlineKeyboardMarkup()
                markup2.add(telebot.types.InlineKeyboardButton(text='–£—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞üîé', callback_data='learn_new'))
                markup2.add(telebot.types.InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä—è—Ç—å —Å–ª–æ–≤–∞üìö', callback_data='repeat_words'))

                achive = '‚úÖ' * sql_user_info(call.message.from_user.id).score  # –Ω–∞–¥–æ –Ω–µ –∫–∞–∫ —Å –∫–ª–∞—Å—Å–æ–º
                bot.send_message(call.message.chat.id,
                                 f'–í–∞—à –Ω–∏–∫: {username}\n\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 10 –¥–Ω–µ–π: {achive}\n\n–í—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {sql_user_info(call.message.from_user.id).cnt_words_total}',
                                 reply_markup=markup2)
            elif call.data == 'learn_new':
                # TODO (@–û–ª–µ—Å—è) –≤—ã–∑–≤–≤–∞—Ç—å –Ω—Ñ—É–Ω–∫—Ü–∏—é
                pass
            elif call.data == 'repeat_words':
                pass
            elif call.data == 'wrong':
                # TODO (@–û–ª–µ—Å—è) —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä–æ–Ω–≥, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞
                pass
            elif call.data == 'accept':
                # TODO (@–û–ª–µ—Å—è) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–≤–∞–ª–∞, new_note(tg_id, word_id, RETRY, 0), –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                # TODO (@–û–ª–µ—Å—è) –∏–Ω–∫—Ä–∏–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
                pass
        # —Ç—É—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–Ω–æ–ø–∫–∏


@bot.message_handler(content_type=['text'])
def text(message):
    if sql_is_user_in_db(message.from_user.id):
        # TODO (@–û–ª–µ—Å—è) –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —é–∑–µ—Ä–∞
        pass
        # —Ç—É—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç


bot.polling(none_stop=True)
